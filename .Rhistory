install.packages("MASS")
install.packages("nlme")
install.packages("ape")
install.packages("dave")
install.packages("pcnm")
install.packages("ade4")
install.packages("maptools")
install.packages("maps")
install.packages("GISTools")
install.packages("marmap")
install.packages("psych")
install.packages("car")
install.packages("boot")
boxplot(yield~Group.1*Group.3, data=datapl4, col=c(4,5,4,5,4,5), boxwex=0.60, main = "Yield of Stylophora and Porites Species over Time", xlab = "Species", ylab = "Yield", names=c("Porites","Stylophora","Porites","Stylophora","Porites","Stylophora","Porites","Stylophora"),cex.axis=0.68)
setwd('D:/Samantha/Data analysis')
setwd('D:/Samantha/Data analysis')
q()
library('vegan')
?biplot.rda
data=xlsread('SSpeed data')
data=load('SSpeed data')
DATA<-read.xlsx("D:/Members/Vicky/Statistic class/SSpeed data.xls")
DATA<-readWorksheet("D:/Members/Vicky/Statistic class/SSpeed data.xls",sheet=1)
xls?
?xlsx
library(readxl)
install.packages("readxl") # CRAN version
library(readxl)
read_excel("my-spreadsheet.xls", sheet = "SSpeed data")
read_excel("my-spreadsheet.xls", sheet = "SSpeed data")
read_excel("SSpeed data.xls", sheet = "SSpeed data")
read_excel("SSpeed data.xlsx", sheet = "SSpeed data")
read_excel("SSpeed data.xlsx", sheet = "SSpeed data")
# scale=T bases the PCA on the correlation matrix
hep.PC.cor = prcomp(SSpeed data, scale=TRUE)
read_excel("SSpeed data.xlsx", sheet = "SSpeed data")
install.packages("readxl") # CRAN version
library(readxl)
read_excel("SSpeed data.xlsx", sheet = "SSpeed data")
install.packages("readxl") # CRAN version
library(readxl)
read_excel("SSpeed data.xlsx", sheet = "SSpeed data")
install.packages("readxl") # CRAN version
library(readxl)
read_excel("SSpeed data.xlsx", sheet = "SSpeed data")
a = prcomp(SSpeed data, scale=TRUE)
a = prcomp(SSpeed data[], scale=TRUE)
1
2
3
x<-c(1)
x<-1
x = 1
class(x)
y <- "a"
class(y)
c(x,y)
class(c(x,y))
is.character(y)
is.character(x)
is.numeric(y)
is.numeric(x)
as.character(x)
class(as.character(x))
sqrt(100)
10^2
100^2
log(100)
log(10,10)
?log(10,10)
loh10(10)
log10(10)
diversity
?diversity
??diversity
example<-100
example<-100 # example = 100
example<-100 # 100
sqrt(example)
?sqrt(example)
Example
Example<- 20
Example
example
pi
Pi
I<-10
N<-2.5
C<-"HAPPY"
is.integer(I)
I<-100
is.integer(I)
?is.integer(I)
is.wholenumber(I)
as.numeric(I)
is.numeric(I)
is.numeric(C)
is.character(C)
is.character(I)
class(c(x,y))
c(x,y)
substr(C,1,3);
paste("the length is",N,sep = " ")
paste("the length is",N,sep = "=")
paste("the length is",N)
paste("the length is",N,sep = "")
paste0("the length is",N)
?paste0("the length is",N)
(V1<-1:3)
V1<-1:3
(V1<-1:3)
(V1<-1:100)
(V1<-1:3)
V1
is.vector(V1)
sum(V1)
mean(V1)
prod(V1)
?prod(V1)
median(V1)
sd(V1)
?sd(V1)
var(V1)
min(V1)
range(V1)
table (V1)
summary(V1)
(V2<-C(x=4,y=5,z=6))
(V2<-c(x=4,y=5,z=6))
class(V2)
is.vector(V2)
(V3 <- c(1:3,7:8))
V3[1:4]  # "[ ]" is used to take the subsetting
V3[1]  # "[ ]" is used to take the subsetting
V3[3]  # "[ ]" is used to take the subsetting
V3[4]  # "[ ]" is used to take the subsetting
V3[6]  # "[ ]" is used to take the subsetting
V3[c(1,4)]
(V4<-V3[-4])
(V3 <- c(1:3,7:8))
V4
?sep
?seq()
seq(1,3)
seq(1,3,0.1)
as.integer(seq(1,3,0.1))
V3[as.integer(seq(1,3,0.1))]
V3[seq(1,3,0.1)]
(mat1=matrix(data=c(5,0.1,3.3,2,0.4,0.01),nrow = 2,ncol=3,byrow=F))
?matrix
is .matrix(mat1)
is.matrix(mat1)
dim(mat1)
mat1[2,3]
mat1[2,]
sum(mat1[2,])
sum(mat)
sum(mat1)
mean(mat1)
(mat2=t(mat1))
A=mat1%*%mat2
A
mat1*mat2
solve(A) # inverse
?solve(A) # inverse
A%*%solve(A)
5.551115e-17
?solve
det(A)
?det(A)
(eA = eigen(A))
eA$vectors # $ can extract the elements
class(eA$vectors)
class(eA)
A %*% eA$vectors # $ can extract the elements
eA$values[1] * eA$vectors[,1]
eA$values[2] * eA$vectors[,2]
(mat3 <- cbind(V1,V2)) # by columns
(mat4 <- rbind(V1,V2)) # by rows
(dat1 <- as.data.frame(mat3));
class(dat1)
(dat1 <- data.frame(V1=V1,V2=V2))
mat3
dat1$V1
dat1$label <- c("a","b","c")
dat1
rep(0,2
)
rep(0,20)
c(rep(0,2),NA)
dat1[4,] <- c(rep(0,2),NA)
dat1
dat1[5,] <- c(dat1[1,1:2],NA)
dat1
which(duplicated(dat1[,1:2])) # check duplicated values
?duplicated
which(duplicated(dat1[,])) # check duplicated values
which(duplicated(dat1)) # check duplicated values
dat1[,1:2]
duplicated(dat1[,1:2])
dat1[,which(duplicated(dat1[,1:2]))] # check duplicated values
dat1[which(duplicated(dat1[,1:2])),] # check duplicated values
(ord <- order(dat2$V1)) # arrange data frame to be in order
(dat2 <- dat1[-5,]) # dat1[-which(duplicated(dat1[,1:2])),]
(ord <- order(dat2$V1)) # arrange data frame to be in order
dat2[ord,]
?sort
sort[dat2]
sort(dat2)
sort(dat2$V1)
dat2$V1
dat2[order(dat2$V1),]
is.na(dat2)
which(is.na(dat2))
which(is.na(dat2$label))
dat2$label[which(is.na(dat2$label))]
dat2$label[which(is.na(dat2$label))]<-1
dat2$label
V1
V2
type="p",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
type="p",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
plot(V1,V2,main="x-1 vs. x-2",xlab = "V1",ylab="V2",type="p",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
?(V1,V2,main="x-1 vs. x-2",xlab = "V1",ylab="V2",type="p",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
?plot(V1,V2,main="x-1 vs. x-2",xlab = "V1",ylab="V2",type="p",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
plot(V1,V2,main="x-1 vs. x-2",xlab = "V1",ylab="V2",
plot(V1,V2,main="x-1 vs. x-2",xlab = "V1",ylab="V2",
type="b",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
text(V1, V2, names(V2), col='red', adj=2)
names(V2)
V2
text(V1, V2, names(V2), col='red', adj=4)
lines(V1,V2) # add a line
?points
type="n",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
plot(V1,V2,main="x-1 vs. x-2",xlab = "V1",ylab="V2",type="n",col=2,lwd=2,pch=20) # try different type, col, lwd and pch
points(V1, V2)
x <- 1
(2+5)*2
2+5*2
sqrt(100)
10^2
log(100)
?log(100)
log(10,base=10)
log10(10)
??log
?diversity
??diversity
example<-100
example
example
Example<- 20
example
Example
K<- NULL
K<-cbind(K,1+K)
K
K<- NULL
K<-cbind(K,1+K)
K
K
K<-cbind(K,1+K)
K
K
K<- NULL
K<-cbind(K,1)
K
K<- NULL
repeat{
K<-cbind(K,1)
if(length(K)>10)break
}
K
K<- NULL
repeat{
K<-cbind(K,1)
if(length(K)>10)break
}
function(x,y){
sqrt(x^2 + y^2)
}
}
f1 = function(x,y){
sqrt(x^2 + y^2)
}
f1
f1(1,1)
f1(3,4)
f2 = function(dat1){
dat1 = 0
}
dat1
(a = f2())
dat1
dat1
f2(0)
f2(1)
f2()
(f2())
(f2(1))
(f2(2))
(f2(3))
dat1
i <- 1
while (i <= 2000){
cat(i,"\n")
i <- i+1
}
?seq()
seq(1,500)
a<-seq(1,500)
a
seq(1,500)[1]
seq(1,500)[200]
a<-seq(1,500)
i<-1
i<-1
i*(i+1)/2
K<-NULL
i<-1
i<-1
repeat{
K<-i*(i+1)/2
cat(K,"/n")
i<-i+1
if(k>2000)break
}
if(K>2000)break
}
i<-1
repeat{
K<-i*(i+1)/2
cat(K,"/n")
i<-i+1
if(K>2000)break
}
K
i<-1
repeat{
K<-i*(i+1)/2
cat(K,"\n")
i<-i+1
if(K>2000)break
}
}
i <- 1
while (i <= 2000){
cat(i,"\n")
i <- i*(i+1)/2
}
}
i <- 1
while (c <= 2000){
cat(c,"\n")
i<-i+1
c<- i*(i+1)/2
}
i <- 1
c<-NULL
while (c <= 2000){
cat(c,"\n")
i<-i+1
c<- i*(i+1)/2
}
i <- 1
c<-NULL
while (c <= 2000){
c<- i*(i+1)/2
cat(c,"\n")
i<-i+1
}
c
c<- i*(i+1)/2
c
i <- 1
while (c <= 2000){
c<- i*(i+1)/2
cat(c,"\n")
i<-i+1
}
rm(list = ls())
i <- 1
while (c <= 2000){
c<- i*(i+1)/2
cat(c,"\n")
i<-i+1
}
i <- 1
c<-1
while (c <= 2000){
c<- i*(i+1)/2
cat(c,"\n")
i<-i+1
}
i <- 1
repeat{
c<- i*(i+1)/2
cat(c,"\n")
i<-i+1
if(c>2000)break
}
for(i in 1:2000){
c<- i*(i+1)/2
cat(c,"\n")
}
for(i in 1:200){
c<- i*(i+1)/2
cat(c,"\n")
}
for(i in 1:20){
c<- i*(i+1)/2
cat(c,"\n")
}
i <- 1
repeat{
c<- i*(i+1)/2
cat(c,"\n")
i<-i+1
if(c>2000)break
}
library(animation)
saveGIF({
for(i in 1:100){
x <- seq(0 + (i * 0.05), 3 + (i * 0.05), length= 100)
y <- x
f <- function(x, y) { sin(x * y) }
z <- outer(x, y, f)
persp(x, y, z, theta = 45, phi = 35, expand = 0.4, col = "orange")
}
}, interval = 0.1, ani.width = 550, ani.height = 550)
grow2 <- function (growth.rate) {
num_gen<-10
generation<-1:num_gen
N <- rep (0,num_gen)
N[1] <- 1
for (i in 2:num_gen) {
N[i]=growth.rate*N[i-1]
}
plot(N~generation, xlim=c(0,10), ylim=c(0,100000), type='l', lwd=2, col='blue')
text(2,40000,growth.rate, cex=4)
text(0.6,38000,'r =', cex=4)
}
saveGIF({ # combine different plots together using function save GIF
for (i in 2:40){
grow2(i)
}
}, interval = 0.05, ani.width = 950, ani.height = 550)
library(animation)
grow2 <- function (growth.rate) {
num_gen<-10
generation<-1:num_gen
N <- rep (0,num_gen)
N[1] <- 1
for (i in 2:num_gen) {
N[i]=growth.rate*N[i-1]
}
plot(N~generation, xlim=c(0,10), ylim=c(0,100000), type='l', lwd=2, col='blue')
text(2,40000,growth.rate, cex=4)
text(0.6,38000,'r =', cex=4)
}
saveGIF({ # combine different plots together using function save GIF
for (i in 2:40){
grow2(i)
}
}, interval = 0.05, ani.width = 950, ani.height = 550)
setwd('C:/Users/FRE-Lab/Desktop/Vic's data')
install.packages("FactoMineR")
install.packages("FactoMineR",type="source")
coral_data.pca <- prcomp(coral_data[,c(1:3)], center = TRUE,scale. = TRUE)
setwd("D:\\Members\\Cathy\\coralAnalysis")
coral_data <- read.csv(file = 'D:/Members/Cathy/coralAnalysis/Master Data - Sheet4')
coral_data <- read.csv(file = 'D:/Members/Cathy/coralAnalysis/Master Data - Sheet4.csv')
coral_data.pca <- prcomp(coral_data[,c(1:3)], center = TRUE,scale. = TRUE)
summary(coral_data.pca)
coral_data[,c(1:3)]
coral_data[,c(2:5)]
coral_data[,c(3:6)]
coral_data.pca <- prcomp(coral_data[,c(3:6)], center = TRUE,scale. = TRUE)
summary(coral_data.pca)
library(devtools)
install_github("vqv/ggbiplot")
install devtools
install "devtools"
library(ggfortify)
install.packages("corrplot")
library("corrplot")
library("devtools")
install.packages("glue")
install.packages("devtools")
library("devtools")
apt-get -y build-dep libcurl4-gnutls-dev
apt-get -y install libcurl4-gnutls-dev
apt-get -y build-dep libcurl4-gnutls-dev
install.packages("rlang")
install.packages("devtools")
library("devtools")
library("devtools_2.3.2.tar")
library("devtools_2.3.2")
library("devtools")
--version
install.packages("Rcpp", dependencies = TRUE)
library("devtools")
library("corrplot")
library("corrplot")
library("devtools")
install.packages("devtools")
library("devtools")
installed.packages()
installed.packages("devtools")
library("devtools")
installed.packages()[:800]
